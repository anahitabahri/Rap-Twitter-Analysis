{
    "collab_server" : "",
    "contents" : "require(tm)\nrequire(SnowballC)\nrequire(wordcloud)\nrequire(streamR)\nrequire(stringr)\nrequire(dplyr)\nrequire(memoise)\n\nlibrary(twitteR)\n\n# DEFINE CLEAN TEXT FUNCTION:\n# The function will remove Twitter handles, hashtags, special characters, URLs, etc. \n\nclean.text <- function(some_txt)\n{\n  some_txt = gsub(\"(RT|via)((?:\\\\b\\\\W*@\\\\w+)+)\", \"\", some_txt)\n  some_txt = gsub(\"@\\\\w+\", \"\", some_txt)\n  some_txt = gsub(\"[[:punct:]]\", \"\", some_txt)\n  some_txt = gsub(\"[[:digit:]]\", \"\", some_txt)\n  some_txt = gsub(\"http\\\\w+\", \"\", some_txt)\n  some_txt = gsub(\"[ \\t]{2,}\", \"\", some_txt)\n  some_txt = gsub(\"^\\\\s+|\\\\s+$\", \"\", some_txt)\n  some_txt = gsub(\"amp\", \"\", some_txt)\n  # define \"tolower error handling\" function\n  try.tolower = function(x)\n  {\n    y = NA\n    try_error = tryCatch(tolower(x), error=function(e) e)\n    if (!inherits(try_error, \"error\"))\n      y = tolower(x)\n    return(y)\n  }\n  \n  some_txt = sapply(some_txt, try.tolower)\n  some_txt = some_txt[some_txt != \"\"]\n  names(some_txt) = NULL\n  return(some_txt)\n}\n\n\n##########################################################################################################\n\n# PARSE TWEETS FROM JSON FILES\n\ntweets.biggie <- parseTweets(\"biggie.json\") # 50 tweets\ntweets.2pac <- parseTweets(\"2pac.json\") # 216 tweets\n\n# GET TEXT\ntxt_biggie = tweets.biggie$text\ntxt_2pac = tweets.2pac$text\n\n# CLEAN TEXT\nclean_biggie = clean.text(txt_biggie)\nclean_2pac = clean.text(txt_2pac)\n\n# CONVERT TO DF\nclean_biggie <- data.frame(clean_biggie, stringsAsFactors = FALSE)\nclean_2pac <- data.frame(clean_2pac, stringsAsFactors = FALSE)\n\n# NAME COLUMN AS TEXT\ncolnames(clean_biggie) <- c(\"text\")\ncolnames(clean_2pac) <- c(\"text\")\n\n\n##########################################################################################################\n\n# create list of rapper options\nrappers <<- list(\"Biggie Tweets\" = \"biggie.tweets\",\n                 \"2Pac Tweets\" = \"2pac.tweets\")\n\n# Using \"memoise\" to automatically cache the results\ngetTermMatrix <- memoise(function(rapper) {\n  if (!(rapper %in% rappers))\n    stop(\"Unknown rapper\")\n  \n  text <- switch(rapper,\n                 \"biggie.tweets\" = clean_biggie,\n                 \"2pac.tweets\" = clean_2pac)\n  \n  text.corpus <- Corpus(VectorSource(text))\n  \n  text.corpus <- tm_map(text.corpus, PlainTextDocument)\n  \n  text.corpus <- tm_map(text.corpus, removeWords, c(\"amp\", stopwords('english')))\n})\n",
    "created" : 1481602318465.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2329809636",
    "id" : "9BF4392F",
    "lastKnownWriteTime" : 1481602332,
    "last_content_update" : 1481602332492,
    "path" : "~/Documents/General Assembly/2pacBiggie/Rap-Twitter-Analysis/shiny_twitter_wc/global.R",
    "project_path" : "global.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}